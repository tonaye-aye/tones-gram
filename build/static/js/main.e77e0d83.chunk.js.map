{"version":3,"sources":["Firebase/config.js","hooks/useFirestore.js","components/ImageGrid.js","components/Modal.js","components/Navbar.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","components/About.js","components/Footer.js","App.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","setBodyOverflow","console","log","className","map","div","layout","whileHover","opacity","key","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Navbar","history","useHistory","type","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","Math","ceil","width","UploadForm","types","useDropzone","onDrop","files","selected","includes","getRootProps","getInputProps","isDragActive","size","About","href","Footer","App","bodyOverflow","document","body","style","overflow","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e77e0d83.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBJWgUc0_AZPkcx6J6Yh1BkXKh8CZXgR48\",\n  authDomain: \"devtones-firegram.firebaseapp.com\",\n  databaseURL: \"https://devtones-firegram.firebaseio.com\",\n  projectId: \"devtones-firegram\",\n  storageBucket: \"devtones-firegram.appspot.com\",\n  messagingSenderId: \"1074261129505\",\n  appId: \"1:1074261129505:web:39c6e521b532d3693f2660\"\n};\n\n// Initialize Firebase here\nfirebase.initializeApp(firebaseConfig); // <- pass through the config variable above\n\n// initialize upload storage\nconst projectStorage = firebase.storage();\n// initialize firestore storage\nconst projectFirestore = firebase.firestore();\n// create timestamp variable to add 'created at' time for image uploads\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import { useState, useEffect } from \"react\";\n\n// firebase storage from config file\nimport { projectFirestore } from \"../Firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snap) => {\n        let documents = [];\n        snap.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n  }, [collection]);\n\n  return { docs };\n};\n\nexport default useFirestore;\n","import React from \"react\";\n\n// firabase\nimport useFirestore from \"../hooks/useFirestore\";\n\n// famer motion\nimport { motion } from \"framer-motion\";\n\nconst ImageGrid = ({ setSelectedImg, setBodyOverflow }) => {\n  // get all of the 'documents' from the firestore collection\n  // -- collection selected is 'images'\n  const { docs } = useFirestore(\"images\");\n  console.log(docs);\n\n  return (\n    <div className=\"img-grid\">\n      {docs &&\n        docs.map((doc) => (\n          <motion.div\n            layout\n            whileHover={{ opacity: 1 }}\n            className=\"img-wrap\"\n            key={doc.id}\n            onClick={() => {\n              setSelectedImg(doc.url);\n              setBodyOverflow(\"hidden\");\n            }}\n          >\n            <motion.img\n              src={doc.url}\n              alt=\"summer\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1 }}\n            />\n          </motion.div>\n        ))}\n    </div>\n  );\n};\n\nexport default ImageGrid;\n","import React from \"react\";\n\n//framer motion\nimport { motion } from \"framer-motion\";\n\nconst Modal = ({ selectedImg, setSelectedImg, setBodyOverflow }) => {\n  const handleClick = (e) => {\n    if (e.target.classList.contains(\"backdrop\")) {\n      setSelectedImg(null);\n      setBodyOverflow(\"visible\");\n    }\n  };\n  return (\n    <motion.div\n      className=\"backdrop\"\n      onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img\n        src={selectedImg}\n        alt=\"fred\"\n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\n\n// nav stuff\nimport { useHistory } from \"react-router-dom\";\n\nconst Navbar = () => {\n  const history = useHistory();\n\n  return (\n    <nav>\n      <p\n        className=\"brand\"\n        onClick={() => {\n          let path = ``;\n          history.push(path);\n        }}\n      >\n        tonesgram\n      </p>\n\n      <div className=\"fold\">\n        <p className=\"hide\">Share memories</p>\n        <button\n          type=\"button\"\n          onClick={() => {\n            let path = `about`;\n            history.push(path);\n          }}\n        >\n          About\n        </button>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import { useState, useEffect } from \"react\";\n\n// firebase storage from config file\nimport {\n  projectStorage,\n  projectFirestore,\n  timestamp\n} from \"../Firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    // create REF reference to file inside firestore database\n    // -- using uploaded images name\n    const storageRef = projectStorage.ref(file.name);\n    // create url reference in firestore database\n    const collectionRef = projectFirestore.collection(\"images\");\n    // take the file and PUT it in the reference\n    // -- '.put' is asynchronous so we tack on '.on' and wait for 'state_changed' to fire function\n    storageRef.put(file).on(\n      \"state_changed\",\n      (snap) => {\n        // snap object is a snapshot in time of the upload object\n        // -- which fires more than once while the file uploads\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100; // create a percentage of how many bytes have been transferred\n        // set the progress as the percentage\n        setProgress(percentage);\n      },\n      (err) => {\n        // set error if there is an error\n        setError(err);\n      },\n      // fire this function when the upload is complete\n      async () => {\n        // finds the image url of the file we just uploaded and saves it in the 'url' variable\n        const url = await storageRef.getDownloadURL();\n        // use timestamp method to add 'created at' time to object\n        const createdAt = timestamp();\n\n        // add the upload to the firestore collection\n        collectionRef.add({ url, createdAt });\n\n        // set the url to the just uploaded image url\n        setUrl(url);\n      }\n    );\n  }, [file]);\n\n  // return the progress, url and error\n  return { progress, url, error };\n};\n\nexport default useStorage;\n","import React, { useEffect } from \"react\";\n\n// import useStorage hook\nimport useStorage from \"../hooks/useStorage\";\n\n// framer motion\nimport { motion } from \"framer-motion\";\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { url, progress } = useStorage(file);\n\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  return (\n    <div className=\"progress\">\n      <p>\n        Uploading {file.name} <strong>{Math.ceil(progress)}%</strong>\n      </p>\n      <motion.div\n        className=\"progress-bar\"\n        initial={{ width: 0 }}\n        animate={{ width: progress + \"%\" }}\n      ></motion.div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React from \"react\";\nimport { useState } from \"react\";\n\n// dropzone\nimport { useDropzone } from \"react-dropzone\";\n\n// componenents\nimport ProgressBar from \"./ProgressBar\";\n\n// icons\nimport { MdPermMedia } from \"react-icons/md\";\nimport { ImFire } from \"react-icons/im\";\n\nconst UploadForm = () => {\n  // using a state hook\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  // specifing types of images that are allowed to be uploaded\n  const types = [\"image/png\", \"image/jpeg\"];\n\n  // dropzone stuff\n  const onDrop = (files) => {\n    let selected = files[0];\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      setError(\"\");\n    } else {\n      setFile(null);\n      setError(\"Please select a .png or .jpg only\");\n    }\n  };\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  // template in JSX\n  return (\n    <form>\n      <h1>Upload...</h1>\n      <div className=\"drop\" {...getRootProps()}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <div>\n            <ImFire size=\"2.5em\" />\n            <p>Drop it like it's hot</p>\n          </div>\n        ) : (\n          <div>\n            <MdPermMedia size=\"2.5em\" />\n            <p>Drag 'n' drop an image (or click here)</p>\n          </div>\n        )}\n      </div>\n      <div className=\"output\">\n        {error && <p className=\"error\">{error}</p>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n};\n\nexport default UploadForm;\n","import React from \"react\";\n\n// nav stuff\nimport { useHistory } from \"react-router-dom\";\n\n// icons\nimport { DiSass, DiReact } from \"react-icons/di\";\nimport { SiFirebase } from \"react-icons/si\";\n\nconst About = () => {\n  const history = useHistory();\n\n  return (\n    <div className=\"about\">\n      <h1>About us</h1>\n      <h3>\n        Upload images simply and watch the display reel update once an image is\n        added.\n      </h3>\n      <h3>Built using:</h3>\n      <ul>\n        <li>\n          <DiReact />\n          <span>React</span>\n        </li>\n        <li>\n          <SiFirebase />\n          <span>Firebase</span>\n        </li>\n        <li>\n          <DiSass />\n          <span>Sass</span>\n        </li>\n      </ul>\n      <div className=\"links\">\n        <button\n          type=\"button\"\n          onClick={() => {\n            let path = ``;\n            history.push(path);\n          }}\n        >\n          Home\n        </button>\n        <a href=\"https://github.com/tonaye-aye/tones-gram\">View code</a>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>&copy; tonesgram 2020</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\n\n// router\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// components\nimport ImageGrid from \"./components/ImageGrid\";\nimport Modal from \"./components/Modal\";\nimport Navbar from \"./components/Navbar\";\nimport UploadForm from \"./components/UploadForm\";\nimport About from \"./components/About\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  // state stuff\n  const [selectedImg, setSelectedImg] = useState(null);\n  const [bodyOverflow, setBodyOverflow] = useState(\"visible\");\n\n  document.body.style.overflow = bodyOverflow;\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* navbar */}\n        <Navbar />\n\n        {/* main area */}\n        <main>\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/\">\n              {/* form */}\n              <UploadForm />\n\n              {/* image grid */}\n              <ImageGrid\n                setBodyOverflow={setBodyOverflow}\n                setSelectedImg={setSelectedImg}\n              />\n\n              {/* modal window */}\n              {selectedImg && (\n                <Modal\n                  setBodyOverflow={setBodyOverflow}\n                  selectedImg={selectedImg}\n                  setSelectedImg={setSelectedImg}\n                />\n              )}\n            </Route>\n          </Switch>\n        </main>\n\n        {/* footer */}\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}